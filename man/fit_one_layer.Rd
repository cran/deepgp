% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.R
\name{fit_one_layer}
\alias{fit_one_layer}
\title{MCMC sampling for one layer GP}
\usage{
fit_one_layer(
  x,
  y,
  nmcmc = 10000,
  verb = TRUE,
  g_0 = 0.01,
  theta_0 = 0.1,
  true_g = NULL,
  settings = NULL,
  cov = c("matern", "exp2"),
  v = 2.5,
  vecchia = FALSE,
  m = min(25, length(y) - 1)
)
}
\arguments{
\item{x}{vector or matrix of input locations}

\item{y}{vector of response values}

\item{nmcmc}{number of MCMC iterations}

\item{verb}{logical indicating whether to print iteration progress}

\item{g_0}{initial value for \code{g}}

\item{theta_0}{initial value for \code{theta}}

\item{true_g}{if true nugget is known it may be specified here (set to a 
small value to make fit deterministic).  Note - values that are too 
small may cause numerical issues in matrix inversions.}

\item{settings}{hyperparameters for proposals and priors (see details)}

\item{cov}{covariance kernel, either Matern or squared exponential 
(\code{"exp2"})}

\item{v}{Matern smoothness parameter (only used if \code{cov = "matern"})}

\item{vecchia}{logical indicating whether to use Vecchia approximation}

\item{m}{size of Vecchia conditioning sets (only used if 
\code{vecchia = TRUE})}
}
\value{
a list of the S3 class \code{gp} or \code{gpvec} with elements:
\itemize{
  \item \code{x}: copy of input matrix
  \item \code{y}: copy of response vector
  \item \code{nmcmc}: number of MCMC iterations
  \item \code{settings}: copy of proposal/prior settings
  \item \code{v}: copy of Matern smoothness parameter (\code{v = 999} 
        indicates \code{cov = "exp2"})
  \item \code{g}: vector of MCMC samples for \code{g}
  \item \code{theta}: vector of MCMC samples for \code{theta}
  \item \code{tau2}: vector of MLE estimates for \code{tau2} 
        (scale parameter)
  \item \code{time}: computation time in seconds
}
}
\description{
Conducts MCMC sampling of hyperparameters for a one layer 
    GP.  Length scale parameter \code{theta} governs 
    the strength of the correlation and nugget parameter \code{g} 
    governs noise.  In Matern covariance, \code{v} governs smoothness.
}
\details{
Utilizes Metropolis Hastings sampling of the length scale and
    nugget parameters with proposals and priors controlled by 
    \code{settings}.  When \code{true_g} is set to a specific value, the 
    nugget is not estimated.  When \code{vecchia = TRUE}, all calculations 
    leverage the Vecchia approximation with specified conditioning set size 
    \code{m}.  Vecchia approximation is only implemented for 
    \code{cov = "matern"}.
    
    NOTE on OpenMP: The Vecchia implementation relies on OpenMP parallelization
    for efficient computation.  This function will produce a warning message 
    if the package was installed without OpenMP (this is the default for 
    CRAN packages installed on Apple machines).  To set up OpenMP 
    parallelization, download the package source code and install 
    using the gcc/g++ compiler.  
    
    Proposals for \code{g} and \code{theta} follow a uniform sliding window 
    scheme, e.g. 
    
    \code{g_star <- runif(1, l * g_t / u, u * g_t / l)}, 
    
    with defaults \code{l = 1} and \code{u = 2} provided in \code{settings}.
    To adjust these, set \code{settings = list(l = new_l, u = new_u)}.
    Priors on \code{g} and \code{theta} follow Gamma distributions with 
    shape parameters (\code{alpha}) and rate parameters (\code{beta}) 
    controlled within the \code{settings} list object.  Defaults are
    \itemize{
        \item \code{settings$alpha$g <- 1.5}
        \item \code{settings$beta$g <- 3.9}
        \item \code{settings$alpha$theta <- 1.5}
        \item \code{settings$beta$theta <- 3.9 / 1.5}
    }
    These priors are designed for \code{x} scaled 
    to [0, 1] and \code{y} scaled to have mean 0 and variance 1.  These may
    be adjusted using the \code{settings} input.
    
    The output object of class \code{gp} is designed for use with 
    \code{continue}, \code{trim}, and \code{predict}.
}
\examples{
# Examples of real-world implementations are available at: 
# https://bitbucket.org/gramacylab/deepgp-ex/
\donttest{
# G function (https://www.sfu.ca/~ssurjano/gfunc.html)
f <- function(xx, a = (c(1:length(xx)) - 1) / 2) { 
    new1 <- abs(4 * xx - 2) + a
    new2 <- 1 + a
    prod <- prod(new1 / new2)
    return((prod - 1) / 0.86)
}

# Training data
d <- 1 
n <- 20
x <- matrix(runif(n * d), ncol = d)
y <- apply(x, 1, f)

# Testing data
n_test <- 100
xx <- matrix(runif(n_test * d), ncol = d)
yy <- apply(xx, 1, f)

plot(xx[order(xx)], yy[order(xx)], type = "l")
points(x, y, col = 2)

# Example 1: full model (nugget fixed)
fit <- fit_one_layer(x, y, nmcmc = 2000, true_g = 1e-6)
plot(fit)
fit <- trim(fit, 1000, 2)
fit <- predict(fit, xx, cores = 1)
plot(fit)

# Example 2: full model (nugget estimated, EI calculated)
fit <- fit_one_layer(x, y, nmcmc = 2000)
plot(fit) 
fit <- trim(fit, 1000, 2)
fit <- predict(fit, xx, cores = 1, EI = TRUE)
plot(fit)
par(new = TRUE) # overlay EI
plot(xx[order(xx)], fit$EI[order(xx)], type = 'l', lty = 2, 
      axes = FALSE, xlab = '', ylab = '')
      
# Example 3: Vecchia approximated model
fit <- fit_one_layer(x, y, nmcmc = 2000, vecchia = TRUE, m = 10) 
plot(fit)
fit <- trim(fit, 1000, 2)
fit <- predict(fit, xx, cores = 1)
plot(fit)
}

}
\references{
Sauer, A, RB Gramacy, and D Higdon. 2020. "Active Learning for Deep Gaussian 
    Process Surrogates." \emph{Technometrics, to appear;} arXiv:2012.08015. 
    \cr\cr
Sauer, A, A Cooper, and RB Gramacy. 2022. "Vecchia-approximated Deep Gaussian
    Processes for Computer Experiments." \emph{pre-print on arXiv:2204.02904} 
    \cr\cr
Gramacy, RB. \emph{Surrogates: Gaussian Process Modeling, Design, and 
    Optimization for the Applied Sciences}. Chapman Hall, 2020.
}
